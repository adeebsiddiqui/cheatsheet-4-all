Legend: <> = variable, [] = optional
====================================
Theory
------
Working Tree/Directory -> Index/Staging Area -> Local Repository --> Remote Repository
A file is 'Untracked' in Working Directory if it is not in index or has never been committed to Local Repository
HEAD 'usually' is a reference to the most recent commit in currently checked-out branch. The latest commit in a branch is also known as 'the tip' of the branch.
HEAD~ or HEAD~1 = Commit-hash previous to the latest one

Commands
--------
$ git config --global user.name "Adeeb Siddiqui"
$ git config --global user.email "adeeb.bd@gmail.com"
$ git config --global remote.origin.prune true  //Automatic branch prune with git fetch or pull
##### Above three configs will be set globally in .gitconfig file [.gitconfig file is located in C:\Users\Adeeb]

$ git config -l | --list		--> list all git configuration variables

$ git help [<command>] OR git [<command>] -h | --help

$ git status

$ git init [<directory>] 	--> Create a new local repository in specified directory

$ git add .			--> stage all the files in current Working Directory to Index

$ git restore [<file>]...               --> discard changes in Working Directory for all tracked files only
$ git restore -S [<file>]...			--> unstage all/specific tracked file(s) + preserve changes to ALL files in Working Directory.
& git reset --hard [<commit-hash>]		--> Reset all tracked files in HEAD+Index+Working Directory to the latest commit / commit-hash + preserve changes to untracked files in working directory.

##### git reset is same as git reset --mixed #####
##### git reset --soft/mixed/hard can be used using commit-hash or HEAD/HEAD~1/HEAD~2...
##### To learn in depth about git reset check out the bookmarked pages #####

$ git commit -m 'message'		--> Commit changes to Local Repository with a message
$ git commit -am 'message'		--> except Untracked files, commit all the changes in Working Directory to Local Repository directly
$ git commit --amend -m 'New message'	--> edit most recent commit message

$ git log [--oneline][-n]	--> display all commits [-n = display last n commits]

$ git log --oneline --graph --decorate --all --> show graph in terminal
$ gitk --all	--> show graph in a new window


##### NON COMMITTED changes in one branch ROLLS OVER to the other checked out branch, so its better to STASH or COMMIT changes before switching branches ##### 


$ git branch						--> list all local branches
$ git branch -r						--> list all remote branches
$ git branch -a						--> list all local + remote branches
$ git branch feature				--> create a branch named 'feature'
$ git branch -d <branch>			--> delete the local branch if it has already been fully merged in its upstream/remote branch
$ git branch -D <branch>			--> delete the local branch irrespective of its merged status

$ git switch feature				--> go to branch named 'feature'
$ git switch -						--> Return to previously checked out branch
$ git switch -c feature				--> create 'feature' branch off of latest commit of currently checked out branch and immediately go to 'feature' branch
$ git switch -c feature master		--> create 'feature' branch off of latest commit of 'master' branch and immediately go to 'feature' branch

$ git checkout <commit-hash>		--> move HEAD to <commit-hash> results in creating a 'detached HEAD' ## https://git-scm.com/docs/git-checkout/#_detached_head

$ git stash [-u]				--> stores away the dirty state (i.e. new changes to tracked files not yet staged) of a branch in the 'Stash Stack' [-u = Stash untracked files also]
$ git stash list				--> See list of stashes stored on the 'Stash Stack'
$ git stash -m 'message'        --> Stash with a message
$ git stash pop 				--> Removes the top most stash from the 'Stash Stack' and applies it
$ git stash drop				--> Delete latest stash from 'Stash Stack' (add stash-id to delete specific stash)
$ git stash show [-p]           --> show changes between HEAD and stashed contents


$ git fetch										--> update all remote-tracking branches info. No files are updated in Working Directory or Local Repository
$ git fetch -p									--> Before fetching, remove any remote-tracking references that no longer exist on the remote
$ git pull										--> fetch and merge to Working Directory from the remote repo version of the current local branch and also update all the other remote-tracking branches info
$ git push										--> push code to remote repo version of the current local branch
$ git push -u origin <branchname>				--> create a branch named 'branchname' at the remote repo with alias 'origin' and push code there from current local branch
$ git clone <local repo path/remote repo url>	--> clone a repository into current directory

$ git remote [-v]								--> shows aliases of list of tracked Remote Repositories; -v shows the url as well
$ git remote add <origin> <URL>					--> add remote repo at URL to list of tracked Remote Repositories by an alias named 'origin'
$ git remote remove <origin>					--> remove remote repo alias 'origin' from list of tracked Remote Repositories


$ git merge feature				--> Add a new merge commit in current branch after selecting all the commits from feature branch which are not in current branch and add them to current branch by positioning them based on ascending commit time of non-identical commits between current and feature branch
$ git merge feature master		--> Add a new merge commit in feature branch after selecting all the commits from master branch which are not in feature branch and add them to feature branch by positioning them based on ascending commit time of non-identical commits between master and feature branch
$ git merge --squash feature	-->	summarize all commit(s) from 'feature' branch into one commit and add that summarized commit into in current branch
$ git merge --abort				--> abort the current conflict resolution process and try to reconstruct the pre-merge state
$ git mergetool	[xyz]			--> run a code comparing tool to resolve merge conflicts

$ git rebase <branch-name>		--> Rebase current branch with branch-name
##### if there are merge conflicts, resolve them then mark them as resolved using git add and then do git rebase --continue #####

$ git rebase -i <commit-hash>	--> to edit/squash previous commits ## https://www.internalpointers.com/post/squash-commits-into-one-git

$ git cherry-pick <commit-hash>
$ git revert <commit-hash>
## https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Patching

$ git diff <commit1> <commit2> [file]	    --> Show changes between two different commits
$ git diff HEAD~1 HEAD [file]			    --> Show changes between HEAD~1 and HEAD
$ git diff <branch1> <branch2> --name-only  --> Show only names of changed files between two branch HEADS
$ git difftool [xyz]					    --> run a code comparing tool to show differences
$ git diff [file]						    --> Show changes between Working Directory and Index
$ git diff HEAD [file]					    --> Show changes between Working Directory and HEAD


Recover from git reset --hard
-----------------------------
git fsck --lost-found; Running that then saves the dangling blobs to the path .git/lost-found/other
https://stackoverflow.com/questions/5788037/recover-from-git-reset-hard
https://stackoverflow.com/questions/7374069/undo-git-reset-hard-with-uncommitted-files-in-the-staging-area
